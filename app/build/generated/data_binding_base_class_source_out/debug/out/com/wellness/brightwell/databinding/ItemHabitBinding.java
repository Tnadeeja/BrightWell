// Generated by view binder compiler. Do not edit!
package com.wellness.brightwell.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.wellness.brightwell.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemHabitBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final ImageButton buttonDelete;

  @NonNull
  public final ImageButton buttonEdit;

  @NonNull
  public final MaterialCardView cardHabit;

  @NonNull
  public final CheckBox checkboxHabit;

  @NonNull
  public final TextView textHabitDescription;

  @NonNull
  public final TextView textHabitName;

  private ItemHabitBinding(@NonNull MaterialCardView rootView, @NonNull ImageButton buttonDelete,
      @NonNull ImageButton buttonEdit, @NonNull MaterialCardView cardHabit,
      @NonNull CheckBox checkboxHabit, @NonNull TextView textHabitDescription,
      @NonNull TextView textHabitName) {
    this.rootView = rootView;
    this.buttonDelete = buttonDelete;
    this.buttonEdit = buttonEdit;
    this.cardHabit = cardHabit;
    this.checkboxHabit = checkboxHabit;
    this.textHabitDescription = textHabitDescription;
    this.textHabitName = textHabitName;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemHabitBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemHabitBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_habit, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemHabitBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDelete;
      ImageButton buttonDelete = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.buttonEdit;
      ImageButton buttonEdit = ViewBindings.findChildViewById(rootView, id);
      if (buttonEdit == null) {
        break missingId;
      }

      MaterialCardView cardHabit = (MaterialCardView) rootView;

      id = R.id.checkboxHabit;
      CheckBox checkboxHabit = ViewBindings.findChildViewById(rootView, id);
      if (checkboxHabit == null) {
        break missingId;
      }

      id = R.id.textHabitDescription;
      TextView textHabitDescription = ViewBindings.findChildViewById(rootView, id);
      if (textHabitDescription == null) {
        break missingId;
      }

      id = R.id.textHabitName;
      TextView textHabitName = ViewBindings.findChildViewById(rootView, id);
      if (textHabitName == null) {
        break missingId;
      }

      return new ItemHabitBinding((MaterialCardView) rootView, buttonDelete, buttonEdit, cardHabit,
          checkboxHabit, textHabitDescription, textHabitName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
